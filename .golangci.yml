# golangci-lint configuration for enhanced code quality
run:
  # Timeout for analysis
  timeout: 5m
  
  # Include test files in analysis
  tests: true
  
  # Skip generated files
  skip-files:
    - ".*\\.pb\\.go$"
    - ".*_gen\\.go$"
    - "vendor/.*"
    - "build/.*"
  
  # Skip directories
  skip-dirs:
    - vendor
    - build
    - dist
    - node_modules

# Output configuration
output:
  # Format: colored-line-number|line-number|json|tab|checkstyle|code-climate
  format: colored-line-number
  
  # Print lines of code with issue
  print-issued-lines: true
  
  # Print linter name in the end of issue text
  print-linter-name: true
  
  # Make issues output unique by line
  uniq-by-line: true

# Linters configuration
linters:
  # Disable all linters by default
  disable-all: true
  
  # Enable specific linters
  enable:
    # Code quality
    - errcheck        # Check for unchecked errors
    - gosimple        # Simplify code
    - govet           # Vet examines Go source code
    - ineffassign     # Detect ineffectual assignments
    - staticcheck     # Staticcheck is go vet on steroids
    - typecheck       # Parse and type-check Go code
    - unused          # Check for unused constants, variables, functions and types
    
    # Code style
    - gofmt           # Check whether code was gofmt-ed
    - goimports       # Check import statements are formatted according to the 'goimport' command
    - revive          # Fast, configurable, extensible, flexible, and beautiful linter for Go
    - stylecheck      # Stylecheck is a replacement for golint
    
    # Complexity
    - cyclop          # Check function and package cyclomatic complexity
    - gocognit        # Compute and check the cognitive complexity of functions
    - gocyclo         # Compute and check the cyclomatic complexity of functions
    - funlen          # Tool for detection of long functions
    
    # Performance
    - prealloc        # Find slice declarations that could potentially be preallocated
    
    # Security
    - gosec           # Inspect source code for security problems
    
    # Bugs
    - bodyclose       # Check whether HTTP response body is closed successfully
    - nilerr          # Find code that returns nil even if it checks that the error is not nil
    - rowserrcheck    # Check whether Err of rows is checked successfully
    - sqlclosecheck   # Check that sql.Rows and sql.Stmt are closed
    
    # Error handling
    - errorlint       # Find code that will cause problems with the error wrapping scheme introduced in Go 1.13
    - wrapcheck       # Check that errors returned from external packages are wrapped
    
    # Concurrency
    - gocritic        # Provides diagnostics that check for bugs, performance and style issues
    
    # Testing
    - testpackage     # Makes you use a separate _test package
    
    # Documentation
    - godot           # Check if comments end in a period
    - misspell        # Find commonly misspelled English words in comments
    
    # Imports
    - gci             # Control Go package import order and make it always deterministic
    
    # Naming conventions
    - predeclared     # Find code that shadows one of Go's predeclared identifiers

# Linters settings
linters-settings:
  # Settings for errcheck
  errcheck:
    # Report about not checking of errors in type assertions: `a := b.(MyStruct)`;
    check-type-assertions: true
    
    # Report about assignment of errors to blank identifier: `num, _ := strconv.Atoi(numStr)`;
    check-blank: true
    
    # List of functions to exclude from checking
    exclude-functions:
      - (*database/sql.DB).Close
      - (*database/sql.Rows).Close
      - (*database/sql.Stmt).Close
      - (*os.File).Close

  # Settings for revive
  revive:
    min-confidence: 0.8
    rules:
      - name: blank-imports
      - name: context-as-argument
      - name: context-keys-type
      - name: dot-imports
      - name: error-return
      - name: error-strings
      - name: error-naming
      - name: exported
      - name: if-return
      - name: increment-decrement
      - name: var-naming
      - name: var-declaration
      - name: package-comments
      - name: range
      - name: receiver-naming
      - name: time-naming
      - name: unexported-return
      - name: indent-error-flow
      - name: errorf
      - name: empty-block
      - name: superfluous-else
      - name: unused-parameter
      - name: unreachable-code
      - name: redefines-builtin-id

  # Settings for gocyclo
  gocyclo:
    min-complexity: 10

  # Settings for gocognit  
  gocognit:
    min-complexity: 15

  # Settings for cyclop
  cyclop:
    max-complexity: 10
    package-average: 5.0

  # Settings for funlen
  funlen:
    lines: 80
    statements: 50

  # Settings for gosec
  gosec:
    includes:
      - G101 # Look for hard coded credentials
      - G102 # Bind to all interfaces
      - G103 # Audit the use of unsafe block
      - G104 # Audit errors not checked
      - G106 # Audit the use of ssh.InsecureIgnoreHostKey
      - G107 # Url provided to HTTP request as taint input
      - G108 # Profiling endpoint automatically exposed on /debug/pprof
      - G109 # Potential Integer overflow made by strconv.Atoi result conversion to int16/32
      - G110 # Potential DoS vulnerability via decompression bomb
      - G201 # SQL query construction using format string
      - G202 # SQL query construction using string concatenation
      - G203 # Use of unescaped data in HTML templates
      - G204 # Audit use of command execution
      - G301 # Poor file permissions used when creating a directory
      - G302 # Poor file permissions used with chmod
      - G303 # Creating tempfile using a predictable path
      - G304 # File path provided as taint input
      - G305 # File traversal when extracting zip archive
      - G401 # Detect the usage of DES, RC4, MD5 or SHA1
      - G402 # Look for bad TLS connection settings
      - G403 # Ensure minimum RSA key length of 2048 bits
      - G404 # Insecure random number source (rand)
      - G501 # Import blocklist: crypto/md5
      - G502 # Import blocklist: crypto/des
      - G503 # Import blocklist: crypto/rc4
      - G504 # Import blocklist: net/http/cgi
      - G505 # Import blocklist: crypto/sha1
      - G601 # Implicit memory aliasing of items from a range statement

  # Settings for gocritic
  gocritic:
    enabled-tags:
      - diagnostic
      - style
      - performance
      - experimental
      - opinionated
    disabled-checks:
      - whyNoLint
      - unnamedResult
      - hugeParam

  # Settings for gci
  gci:
    sections:
      - standard # Standard section: captures all standard packages
      - default # Default section: contains all imports that could not be matched to another section type
      - prefix(github.com/octop162/normal-form-app-by-claude) # Custom section: groups all imports with the specified Prefix

  # Settings for gofmt
  gofmt:
    simplify: true

  # Settings for goimports
  goimports:
    local-prefixes: github.com/octop162/normal-form-app-by-claude

  # Settings for misspell
  misspell:
    locale: US

  # Settings for stylecheck
  stylecheck:
    checks: ["all", "-ST1000", "-ST1003", "-ST1016", "-ST1020", "-ST1021", "-ST1022"]

  # Settings for unused
  unused:
    check-exported: false

  # Settings for prealloc
  prealloc:
    simple: true
    range-loops: true
    for-loops: false

# Issues configuration
issues:
  # List of regexps of issue texts to exclude
  exclude:
    # Exclude some staticcheck messages
    - "SA9003:"
    - "SA6002:"
    
  # Excluding configuration per-path, per-linter, per-text and per-source
  exclude-rules:
    # Exclude some linters from running on tests files
    - path: _test\.go
      linters:
        - gocyclo
        - errcheck
        - gosec
        - funlen
        - gocognit
        - cyclop
    
    # Exclude some linters from running on main.go
    - path: cmd/server/main\.go
      linters:
        - gocyclo
        - funlen
        - gocognit
        - cyclop
    
    # Exclude some issues in wire.go files (dependency injection)
    - path: wire\.go
      linters:
        - unused
        - deadcode
    
    # Exclude errors in generated files
    - path: \.pb\.go
      linters:
        - stylecheck
        - unused
        - gosimple
    
    # Exclude specific revive rules for certain files
    - path: internal/model/
      linters:
        - revive
      text: "exported"
    
    # Allow blank imports in main package
    - path: cmd/
      linters:
        - revive
      text: "blank-imports"

  # Independently of option `exclude` we use default exclude patterns
  exclude-use-default: false
  
  # Maximum issues count per one linter
  max-issues-per-linter: 50
  
  # Maximum count of issues with the same text
  max-same-issues: 3
  
  # Show only new issues: if there are unstaged changes or untracked files,
  # only those changes are analyzed
  new: false

# Severity configuration
severity:
  default-severity: error
  case-sensitive: false
  rules:
    - linters:
        - revive
      severity: warning
    - linters:
        - stylecheck
      severity: warning
    - linters:
        - gocognit
        - cyclop
        - gocyclo
        - funlen
      severity: warning