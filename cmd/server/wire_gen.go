// Code generated by Wire. DO NOT EDIT.

//go:generate go run -mod=mod github.com/google/wire/cmd/wire
//go:build !wireinject
// +build !wireinject

package main

import (
	"database/sql"
	"github.com/google/wire"
	"github.com/octop162/normal-form-app-by-claude/internal/handler"
	"github.com/octop162/normal-form-app-by-claude/internal/repository"
	"github.com/octop162/normal-form-app-by-claude/internal/service"
	"github.com/octop162/normal-form-app-by-claude/pkg/config"
	"github.com/octop162/normal-form-app-by-claude/pkg/database"
	"github.com/octop162/normal-form-app-by-claude/pkg/external"
	"github.com/octop162/normal-form-app-by-claude/pkg/logger"
	"github.com/octop162/normal-form-app-by-claude/pkg/validator"
)

// Injectors from wire.go:

// wireApp initializes the entire application with dependency injection
func wireApp() (*Application, func(), error) {
	configConfig, err := config.LoadConfig()
	if err != nil {
		return nil, nil, err
	}
	logger := provideLogger(configConfig)
	db, err := provideDB(configConfig, logger)
	if err != nil {
		return nil, nil, err
	}
	sqlDB := provideSQLDB(db)
	userRepository := repository.NewUserRepository(sqlDB, logger)
	userOptionRepository := repository.NewUserOptionRepository(sqlDB, logger)
	optionRepository := repository.NewOptionRepository(sqlDB, logger)
	customValidator, err := validator.NewValidator()
	if err != nil {
		return nil, nil, err
	}
	userService := service.NewUserService(userRepository, userOptionRepository, optionRepository, customValidator, logger)
	userHandler := handler.NewUserHandler(userService, logger)
	sessionRepository := repository.NewSessionRepository(sqlDB, logger)
	sessionService := service.NewSessionService(sessionRepository, logger)
	sessionHandler := handler.NewSessionHandler(sessionService, logger)
	manager := provideExternalAPIManager(configConfig, logger)
	optionService := service.NewOptionService(optionRepository, manager, logger)
	optionHandler := handler.NewOptionHandler(optionService, logger)
	prefectureRepository := repository.NewPrefectureRepository(sqlDB, logger)
	addressService := service.NewAddressService(prefectureRepository, manager, logger)
	addressHandler := handler.NewAddressHandler(addressService, logger)
	planService := service.NewPlanService(logger)
	planHandler := handler.NewPlanHandler(planService, logger)
	healthHandler := handler.NewHealthHandler(db, logger)
	application := &Application{
		UserHandler:    userHandler,
		SessionHandler: sessionHandler,
		OptionHandler:  optionHandler,
		AddressHandler: addressHandler,
		PlanHandler:    planHandler,
		HealthHandler:  healthHandler,
		DB:             sqlDB,
		Logger:         logger,
		Config:         configConfig,
	}
	return application, func() {
	}, nil
}

// wire.go:

// Provider functions for dependency injection
func provideLogger(cfg *config.Config) *logger.Logger {
	return logger.NewLogger(cfg.Log.Level)
}

func provideDB(cfg *config.Config, log *logger.Logger) (*database.DB, error) {
	return database.NewDB(&cfg.Database, log)
}

func provideSQLDB(db *database.DB) *sql.DB {
	return db.DB
}

func provideCleanupFunc(db *database.DB) func() {
	return func() {
		if db != nil {
			if err := db.Close(); err != nil {

			}
		}
	}
}

func provideExternalAPIManager(cfg *config.Config, log *logger.Logger) *external.Manager {
	managerConfig := &external.ManagerConfig{}

	if cfg.ExternalAPI.InventoryAPI.BaseURL != "" {
		managerConfig.InventoryAPI = &external.Config{
			BaseURL:    cfg.ExternalAPI.InventoryAPI.BaseURL,
			Timeout:    cfg.ExternalAPI.InventoryAPI.Timeout,
			MaxRetries: cfg.ExternalAPI.InventoryAPI.MaxRetries,
			RetryDelay: cfg.ExternalAPI.InventoryAPI.RetryDelay,
		}
	}

	if cfg.ExternalAPI.RegionAPI.BaseURL != "" {
		managerConfig.RegionAPI = &external.Config{
			BaseURL:    cfg.ExternalAPI.RegionAPI.BaseURL,
			Timeout:    cfg.ExternalAPI.RegionAPI.Timeout,
			MaxRetries: cfg.ExternalAPI.RegionAPI.MaxRetries,
			RetryDelay: cfg.ExternalAPI.RegionAPI.RetryDelay,
		}
	}

	if cfg.ExternalAPI.AddressAPI.BaseURL != "" {
		managerConfig.AddressAPI = &external.Config{
			BaseURL:    cfg.ExternalAPI.AddressAPI.BaseURL,
			Timeout:    cfg.ExternalAPI.AddressAPI.Timeout,
			MaxRetries: cfg.ExternalAPI.AddressAPI.MaxRetries,
			RetryDelay: cfg.ExternalAPI.AddressAPI.RetryDelay,
		}
	}

	return external.NewManager(managerConfig, log)
}

// Repository provider set
var repositorySet = wire.NewSet(repository.NewUserRepository, repository.NewSessionRepository, repository.NewUserOptionRepository, repository.NewOptionRepository, repository.NewPrefectureRepository)

// Service provider set
var serviceSet = wire.NewSet(service.NewUserService, service.NewSessionService, service.NewOptionService, service.NewAddressService, service.NewPlanService)

// Handler provider set
var handlerSet = wire.NewSet(handler.NewUserHandler, handler.NewSessionHandler, handler.NewOptionHandler, handler.NewAddressHandler, handler.NewPlanHandler, handler.NewHealthHandler)

// Infrastructure provider set
var infrastructureSet = wire.NewSet(config.LoadConfig, provideLogger,
	provideDB,
	provideSQLDB,
	provideCleanupFunc,
	provideExternalAPIManager, validator.NewValidator,
)
