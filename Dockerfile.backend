# Build stage
FROM golang:1.21-alpine AS builder

# Install build dependencies
RUN apk add --no-cache git ca-certificates tzdata

WORKDIR /app

# Copy go mod files first for better layer caching
COPY go.mod go.sum ./

# Download dependencies with proxy for better reliability
ENV GOPROXY=https://proxy.golang.org,direct
ENV GOSUMDB=sum.golang.org
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Build with optimizations for production
ENV CGO_ENABLED=0
ENV GOOS=linux
ENV GOARCH=amd64
RUN go build \
    -ldflags='-s -w -extldflags "-static"' \
    -a -installsuffix cgo \
    -o server \
    cmd/server/main.go

# Verify the binary
RUN ./server --help || echo "Binary built successfully"

# Final stage - Use distroless for minimal attack surface
FROM gcr.io/distroless/static-debian11:nonroot

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy CA certificates
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy the binary
COPY --from=builder /app/server /server

# Use non-root user for security
USER nonroot:nonroot

# Health check
HEALTHCHECK --interval=30s --timeout=10s --start-period=30s --retries=3 \
    CMD ["/server", "--health-check"] || exit 1

# Expose port
EXPOSE 8080

# Run the application
ENTRYPOINT ["/server"]